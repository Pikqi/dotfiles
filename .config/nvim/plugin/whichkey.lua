local status_ok, wk = pcall(require, "which-key")
if not status_ok then
	return
end

local setup = {

	---@type wk.Win.opts
	win = {
		-- width = 1,
		-- height = { min = 4, max = 25 },
		-- col = 0,
		-- row = math.huge,
		border = "rounded",
		padding = { 2, 2, 2, 2 }, -- extra window padding [top/bottom, right/left]
		title = true,
		title_pos = "center",
		zindex = 1000,
		-- Additional vim.wo and vim.bo options
		bo = {},
		wo = {
			winblend = 10, -- value between 0-100 0 for fully opaque and 100 for fully transparent
		},
	},
}
local mappings = {
	{
		"<leader>C",
		"<cmd>%bd|e#|bd#<CR>",
		desc = "Close all other Buffers",
		nowait = false,
		remap = false,
	},
	{ "<leader>M", "<cmd>MarkdownPreview<cr>", desc = "Markdown Preview", nowait = false, remap = false },
	{ "<leader>Q", "<cmd>qa!<CR>", desc = "Quit all", nowait = false, remap = false },
	{ "<leader>R", "<cmd>Telescope oldfiles<cr>", desc = "Recent Files", nowait = false, remap = false },
	{
		"<leader>W",
		"<cmd>noa w<CR>",
		desc = "Save without formatting",
		nowait = false,
		remap = false,
	},
	{
		"<leader>c",
		"<cmd>bdelete!<CR><cmd>bnext<CR>",
		desc = "Close Buff",
		nowait = false,
		remap = false,
	},
	{
		"<leader>d",
		group = "Diagnostics",
		nowait = false,
		remap = false,
	},
	{
		"<leader>da",
		"<cmd>lua vim.lsp.buf.code_action()<cr>",
		desc = "Code actions",
		nowait = false,
		remap = false,
	},
	{
		"<leader>dh",
		"<cmd>lua vim.diagnostic.open_float()<cr>",
		desc = "Open float",
		nowait = false,
		remap = false,
	},
	{
		"<leader>dj",
		"<cmd>lua vim.diagnostic.goto_next()<cr>",
		desc = "Next",
		nowait = false,
		remap = false,
	},
	{
		"<leader>dk",
		"<cmd>lua vim.diagnostic.goto_prev()<cr>",
		desc = "Prev",
		nowait = false,
		remap = false,
	},
	{
		"<leader>e",
		"<cmd>NvimTreeToggle<cr>",
		desc = "Explorer",
		nowait = false,
		remap = false,
	},
	{
		"<leader>f",
		"<cmd>Telescope find_files<cr>",
		desc = "Find Files",
		nowait = false,
		remap = false,
	},
	{
		"<leader>g",
		group = "Git",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gH",
		"<cmd>:Gitsigns stage_hunk<cr>",
		desc = "Stage hunk",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gR",
		"<cmd>:Gitsigns reset_hunk<cr>",
		desc = "reset_hunk",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gb",
		"<cmd>:Gitsigns blame_line<cr>",
		desc = "Show blame",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gc",
		"<cmd>Telescope git_commits<cr>",
		desc = "Checkout commit",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gd",
		"<cmd>:Gitsigns diffthis<cr>",
		desc = "Diff",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gg",
		"<cmd>lua _LAZYGIT_TOGGLE()<CR>",
		desc = "Lazygit",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gj",
		"<cmd>:Gitsigns next_hunk<cr>",
		desc = "Next hunk",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gk",
		"<cmd>:Gitsigns prev_hunk<cr>",
		desc = "Previous hunk",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gl",
		"<cmd>:Gitsigns toggle_linehl<cr>",
		desc = "show lines",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gp",
		"<cmd>:Gitsigns preview_hunk<cr>",
		desc = "Preview hunk",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gs",
		"<cmd>:Gitsigns stage_buffer<cr>",
		desc = "Stage file",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gw",
		"<cmd>:Gitsigns toggle_word_diff<cr>",
		desc = "word diff",
		nowait = false,
		remap = false,
	},
	{
		"<leader>gx",
		"<cmd>Telescope git_branches<cr>",
		desc = "Checkout branch",
		nowait = false,
		remap = false,
	},
	{
		"<leader>h",
		"<cmd>nohlsearch<CR>",
		desc = "No Highlight",
		nowait = false,
		remap = false,
	},
	{
		"<leader>k",
		"<cmd>lua require('pretty_hover').hover()<cr>",
		desc = "Show info",
		nowait = false,
		remap = false,
	},
	{
		"<leader>l",
		group = "LSP",
		nowait = false,
		remap = false,
	},
	{
		"<leader>lD",
		"<cmd>lua vim.lsp.buf.declaration()<cr>",
		desc = "Declaration",
		nowait = false,
		remap = false,
	},
	{
		"<leader>lR",
		"<cmd>Glance references<cr>",
		desc = "References",
		nowait = false,
		remap = false,
	},
	{
		"<leader>ld",
		"<cmd>Glance definitions<cr>",
		desc = "Definition",
		nowait = false,
		remap = false,
	},
	{
		"<leader>li",
		"<cmd>Glance implementations<cr>",
		desc = "Implementation",
		nowait = false,
		remap = false,
	},
	{
		"<leader>lr",
		"<cmd>lua vim.lsp.buf.rename()<cr>",
		desc = "Rename",
		nowait = false,
		remap = false,
	},
	{
		"<leader>o",
		"<cmd>CommentToggle<cr>",
		desc = "Comment",
		nowait = false,
		remap = false,
	},
	{
		"<leader>q",
		"<cmd>q!<CR>",
		desc = "Quit",
		nowait = false,
		remap = false,
	},
	{
		"<leader>r",
		"<cmd>NvimTreeFindFile<cr>",
		desc = "Open folder",
		nowait = false,
		remap = false,
	},
	{
		"<leader>s",
		group = "Search",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sC",
		"<cmd> Easypick changed_files_main<cr>",
		desc = "Show all changed files of this branch",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sb",
		"<cmd>lua require('telescope.builtin').buffers(require('telescope.themes').get_dropdown{previewer = false})<cr>",
		desc = "Buffers",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sc",
		"<cmd> Easypick changed_files<cr>",
		desc = "Show all changed files",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sd",
		"<cmd> Telescop diagnostics<cr>",
		desc = "Find diagnostics",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sg",
		"<cmd> Telescop live_grep<cr>",
		desc = "live grep",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sh",
		"<cmd>Telescope help_tags<cr>",
		desc = "Help tags",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sk",
		"<cmd> Telescop keymaps<cr>",
		desc = "Find keymaps",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sm",
		"<cmd> Telescop marks<cr>",
		desc = "Find marks",
		nowait = false,
		remap = false,
	},
	{
		"<leader>sr",
		"<cmd> Telescop lsp_references<cr>",
		desc = "Find all refrences",
		nowait = false,
		remap = false,
	},
	{
		"<leader>ss",
		"<cmd>Telescope resume<cr>",
		desc = "Resume last query",
		nowait = false,
		remap = false,
	},
	{
		"<leader>t",
		group = "Toggle",
		nowait = false,
		remap = false,
	},
	{
		"<leader>tb",
		"<cmd>set list!<CR>",
		desc = "Show whitespace",
		nowait = false,
		remap = false,
	},
	{
		"<leader>tg",
		desc = "<cmd> Gitsigns toggle_current_line_blame<CR>",
		nowait = false,
		remap = false,
	},
	{
		"<leader>th",
		"<cmd>TSToggle highlight<CR>",
		desc = "TS highlight",
		nowait = false,
		remap = false,
	},
	{
		"<leader>ti",
		"<cmd>IndentBlanklineToggle!<CR>",
		desc = "TS indent",
		nowait = false,
		remap = false,
	},
	{
		"<leader>tr",
		"<cmd>TSToggle rainbow<CR>",
		desc = "TS rainbow",
		nowait = false,
		remap = false,
	},
	{
		"<leader>tw",
		"<cmd>:set wrap! linebreak!<cr><cr>",
		desc = "Wrap text",
		nowait = false,
		remap = false,
	},
	{
		"<leader>tz",
		"<cmd>ZenMode<CR>",
		desc = "Zen mode",
		nowait = false,
		remap = false,
	},
	{
		"<leader>w",
		"<cmd>w!<CR>",
		desc = "Save",
		nowait = false,
		remap = false,
	},
}

wk.setup(setup)
-- wk.setup()
-- wk.register(mappings, opts)
wk.add(mappings)
